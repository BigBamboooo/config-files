
webpack
const path = require('path');
const ExtractTextPlugin = require('extract-text-webpack-plugin');

module.exports = (env) => {
  const isProduction = env === 'production';
  const CSSExtract = new ExtractTextPlugin('styles.css');

  return {
    entry: './src/index.js',
    output: {
      path: path.join(__dirname, 'public'),
      filename: 'bundle.js'
    },
    module: {
        loaders: [
            {test: /\.js$/, include: path.join(__dirname, 'src'), loaders: ['babel-loader']},
            {test: /(\.css)$/, loaders: ['style-loader', 'css-loader']},
            {test: /\.eot(\?v=\d+\.\d+\.\d+)?$/, loader: 'file-loader'},
            {test: /\.(woff|woff2)$/, loader: 'url?prefix=font/&limit=5000'},
            {test: /\.ttf(\?v=\d+\.\d+\.\d+)?$/, loader: 'url?limit=10000&mimetype=application/octet-stream'},
            {test: /\.svg(\?v=\d+\.\d+\.\d+)?$/, loader: 'url?limit=10000&mimetype=image/svg+xml'}
      ]
    },
    plugins: [
      CSSExtract
    ],
    devtool: isProduction ? 'source-map' : 'inline-source-map',
    devServer: {
      contentBase: path.join(__dirname, 'public'),
      historyApiFallback: true
    }
  };
};


babelrc

{
    "presets": [
        "env",
        "react"
    ]
}


package.json

{
  "name": "mcasjs",
  "version": "1.0.0",
  "private": true,
  "proxy": "http://localhost:5000/",
  "dependencies": {
    "axios": "^0.18.0",
    "babel-cli": "6.24.1",
    "babel-core": "6.25.0",
    "babel-loader": "7.1.1",
    "babel-polyfill": "^6.26.0",
    "babel-preset-env": "1.5.2",
    "babel-preset-react": "6.24.1",
    "css-loader": "^0.28.11",
    "express": "^4.16.2",
    "extract-text-webpack-plugin": "^3.0.2",
    "file-loader": "^1.1.11",
    "font-awesome": "^4.7.0",
    "history": "^4.7.2",
    "lodash": "^4.17.5",
    "mssql": "^4.1.0",
    "npm-run-all": "^1.8.0",
    "react": "^16.2.0",
    "react-dom": "^16.2.0",
    "react-dropdown": "^1.4.0",
    "react-iframe": "^1.1.0",
    "react-router-dom": "^4.2.2",
    "sass-loader": "^6.0.6",
    "style-loader": "^0.18.2",
    "superagent": "^3.8.2",
    "ttf-loader": "^1.0.2",
    "url-loader": "^1.0.1",
    "webpack": "3.1.0",
    "webpack-dev-server": "2.5.1"
  },
  "scripts": {
    "build": "webpack",
    "build:prod": "webpack -p --env production",
    "start": "node server/server.js",
    "heroku-postbuild": "npm run build:prod"
  },
  "devDependencies": {
    "lodash": "^4.17.5"
  }
}



///md

{
  "name": "expensify",
  "version": "1.0.0",
  "main": "index.js",
  "author": "",
  "license": "MIT",
  "scripts": {
    "serve": "live-server public/",
    "build:dev": "webpack",
    "build:prod": "webpack -p --env production",
    "dev-server": "webpack-dev-server",
    "test": "jest --config=jest.config.json"
  },
  "dependencies": {
    "babel-cli": "6.24.1",
    "babel-core": "6.25.0",
    "babel-loader": "7.1.1",
    "babel-plugin-transform-class-properties": "6.24.1",
    "babel-plugin-transform-object-rest-spread": "6.23.0",
    "babel-preset-env": "1.5.2",
    "babel-preset-react": "6.24.1",
    "css-loader": "0.28.4",
    "enzyme": "2.9.1",
    "enzyme-to-json": "1.5.1",
    "express": "4.15.4",
    "extract-text-webpack-plugin": "3.0.0",
    "jest": "20.0.4",
    "live-server": "^1.2.0",
    "moment": "2.18.1",
    "node-sass": "4.5.3",
    "normalize.css": "7.0.0",
    "react": "15.6.1",
    "react-addons-shallow-compare": "15.6.0",
    "react-dates": "12.3.0",
    "react-dom": "15.6.1",
    "react-modal": "2.2.2",
    "react-redux": "5.0.5",
    "react-router-dom": "4.1.2",
    "react-test-renderer": "15.6.1",
    "redux": "3.7.2",
    "sass-loader": "6.0.6",
    "style-loader": "0.18.2",
    "uuid": "3.1.0",
    "validator": "8.0.0",
    "webpack": "3.1.0",
    "webpack-dev-server": "2.5.1"
  }
}


//extense
<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Tatoo</title>
  <link rel="icon" type="image/png" href="/images/favicon.png" />
  <link rel="stylesheet" type="text/css" href="/styles.css" />
</head>

<body>
  <div id="app"></div>
  <script src="/bundle.js"></script>
</body>

</html>


//git

# See https://help.github.com/ignore-files/ for more about ignoring files.

# dependencies
/node_modules
/public/bundle.js
/public/bundle.js.map

server

const path = require('path');
const express = require('express');
const app = express();
const publicPath = path.join(__dirname, '..', 'public');

app.use(express.static(publicPath));

app.get('*', (req, res) => {
  res.sendFile(path.join(publicPath, 'index.html'));
});

app.listen(3000, () => {
  console.log('Server is up!');
});
