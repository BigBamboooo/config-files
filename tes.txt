constructor(props) {
        super(props);
        this.state = {
            displayModal: false,
            displayUrl: '',
            dataFromDb: [],
            displayName: '',
            width: 0,
            height: 0,
        }
        this.onModalClose = this.onModalClose.bind(this);
        this.onShowModal = this.onShowModal.bind(this);
        this.handleResize = this.handleResize.bind(this);
    }
    onModalClose() {
        this.setState({ displayModal: false });
    }
    onShowModal(url, name) {  
        return () => {
            // window.open(url,'1525123233697','width=700,height=500,toolbar=0,menubar=0,location=0,status=1,scrollbars=1,resizable=1,left=0,top=0');
             this.setState({ displayModal: true, displayUrl: url, displayName:name});
        }
    }

    handleResize() {
        const width = window.innerWidth;
        const height = window.innerHeight
        this.setState({ width, height });
    }
    componentWillMount() {
        window.addEventListener("resize", () => { this.handleResize() }, true);
    }
    componentDidMount() {
        fetch('http://localhost:5000/api/getLinks')
            .then(res => {
                return res.json();
            })
            .then(dataFromDb => {
                this.setState({ dataFromDb });
            })
            .catch(err => {

                this.setState({});
            })
        //const dummyData = 
        // [{ name: 'policyadministration', displayName: 'Policy Administration', url: 'http://www.google.com/' }, { name: 'priorauthorization', displayName: 'Prior authorization Ex. Pharma', url: 'http://www.youtube.com/embed/xDMP3i36naA' }]
        //this.setState({ dataFromDb: dummyData });
        this.handleResize();
    }
    componentWillUnmount() {
        window.removeEventListener("resize", this.handleResize, true);
    }

    render() {
        var { displayModal, displayUrl, width, dataFromDb, height } = this.state;
        return (
            <div className="tabs-panel is-active" id="tabs-panel-4 ">
                <div className="row expanded flex ">

                    {_.map(dataFromDb, (data) => {
                        return <div className="tag fill gw-blue" onClick={this.onShowModal(data.url,data.name)} key={data.name}>
                        <a href="javascript:void(0)"><button className = "buttonStyle">{data.name}</button></a>
                    </div>
                    })}
                </div>

                {displayModal && <IFrame url={this.state.displayUrl} pageName={this.state.displayName} height = {height} onClose={this.onModalClose} width={width} />}
            </div>
        );

    }
}

/%%%%%%%%%%%%%%%/


.buttonStyle {  
    margin-bottom: 10px;      
    border: none;  
    cursor: pointer;  
    font-size: 20px;  
    border-radius: 5px;
    width: 200px;
    height: 100px     
}  





.modal {
  display: none; /* Hidden by default */
  position: fixed; /* Stay in place */
  z-index: 1000; /* Sit on top */
  padding-top: 100px; /* Location of the box */
  left: 0;
  top: 0;
  width: 100%; /* Full width */
  height: 100%; /* Full height */
  overflow: auto; /* Enable scroll if needed */
  background-color: rgb(0,0,0); /* Fallback color */
  background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
}

.modal.open{
  display: block !important;
}

/* Modal Content */
.modal-content {
  background-color: #fefefe;
  margin: auto;
  padding: 20px;
  border: 1px solid #888;
  width: 100%;
}

/* The Close Button */
.close {
  color: #aaaaaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
}

.close:hover,
.close:focus {
  color: #000;
  text-decoration: none;
  cursor: pointer;
}
